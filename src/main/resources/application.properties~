spring.application.name=SpringDataRest

# --- DEV: H2 in-memory (as in TP) ---
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:testbd
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=root
#spring.datasource.password=root
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.security.user.name=user
#spring.security.user.password=pass

# ===== MariaDB (TP) =====
spring.datasource.url=jdbc:mariadb://localhost:3306/compagnie
spring.datasource.username=sbuser
spring.datasource.password=sbpass
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

# JPA schema generation (dev only â€“ TP uses create-drop)
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop
# (Optional) explicit dialect; Hibernate usually auto-detects
# spring.jpa.database-platform=org.hibernate.dialect.MariaDBDialect

# Dev basic auth (keep in sync with your React axios.js)
spring.security.user.name=user
spring.security.user.password=pass



# Expose Data REST under /api (TP)
spring.data.rest.base-path=/api
spring.jpa.open-in-view=false

# JPA logging (optional)
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# OpenAPI Swagger UI endpoints (TP uses /swagger-ui.html)
# With springdoc 2.x, UI is at /swagger-ui/index.html, and JSON at /v3/api-docs
# No config needed; included for clarity.

# CORS for React dev server
# We'll also add @CrossOrigin on the controller.






